" vim: set ts=4 sw=4 sts=0:
"-----------------------------------------------------------------------------

filetype off

" NeoBundle関連
if has('vim_starting')
  set nocompatible               " Be iMproved
 " Required:
 set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

NeoBundle 'git://github.com/Shougo/neocomplete.git'
NeoBundle 'git://github.com/Shougo/neosnippet.git'
NeoBundle 'git://github.com/Shougo/neosnippet-snippets.git'
NeoBundle 'git://github.com/thinca/vim-ref.git'
NeoBundle 'git://github.com/mattn/emmet-vim.git'
NeoBundle 'git://github.com/shanlalit/vim-autoclose.git'
NeoBundle 'git://github.com/scrooloose/nerdtree.git'
NeoBundle 'git://github.com/tpope/vim-surround.git'
NeoBundle 'git://github.com/vim-scripts/molokai.git'
NeoBundle 'git://github.com/jnurmine/Zenburn.git'
NeoBundle 'git://github.com/cschlueter/vim-wombat.git'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'https://github.com/everzet/phpfolding.vim.git'
NeoBundle 'https://github.com/stephpy/vim-php-cs-fixer.git'
NeoBundle 'https://github.com/tpope/vim-fugitive.git'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'git://github.com/mileszs/ack.vim.git'
NeoBundle 'quickrun.vim'
NeoBundle 'ref.vim'
NeoBundle 'osyo-manga/vim-over'
NeoBundle 'git://github.com/thinca/vim-qfreplace.git'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'vim-scripts/AnsiEsc.vim'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'bling/vim-airline'

"-----------------------------------------------------------------------------
" バックアップ関連
"-----------------------------------------------------------------------------
set viminfo+=n~/.vim/
set directory=~/.vim/tmp/swap
set backupdir=~/.vim/tmp/backup

"-----------------------------------------------------------------------------
" 文字コード関連
"
" 文字コード
scriptencoding=utf-8
set fileencoding=utf-8

" 改行コードの自動認識
set fileformats=unix,dos,mac

" □とか○の文字があってもカーソル位置がずれないようにする
set ambiwidth=double

"-----------------------------------------------------------------------------
" コマンドライン
"-----------------------------------------------------------------------------
" コマンドラインは1行
set cmdheight=1
" コマンドを表示"
set showcmd

"-----------------------------------------------------------------------------
" 編集関連
"
"オートインデントする
set autoindent
set smartindent
"自動コメントアウト防止
autocmd FileType * setlocal formatoptions-=ro
set backspace=indent,eol,start
"-----------------------------------------------------------------------------
" 検索関連
"
"検索文字列が小文字の場合は大文字小文字を区別なく検索する
set ignorecase
"検索文字列に大文字が含まれている場合は区別して検索する
set smartcase
"検索時に最後まで行ったら最初に戻る
set wrapscan
"検索文字列入力時に順次対象文字列にヒットさせない
set noincsearch

"-----------------------------------------------------------------------------
" 装飾関連
"
"シンタックスハイライトを有効にする
syntax enable
set background=dark
colorscheme solarized
"タブの左側にカーソル表示
set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<
set list
"タブ幅を設定する
set tabstop=4
set shiftwidth=4
"入力中のコマンドをステータスに表示する
set showcmd
"括弧入力時の対応する括弧を表示
set showmatch
"検索結果文字列のハイライトを有効にする
set hlsearch
"ステータスラインを常に表示
set laststatus=2
"行番号の表示
set number
"色設定
set t_Co=256
"フォント設定
set guifont=Ricty\ Regular\ for\ Powerline:h14

"-----------------------------------------------------------------------------
" キーバインド定義
"-----------------------------------------------------------------------------
" 下に移動
inoremap <C-n> <Down>
cnoremap <C-n> <Down>
nnoremap <C-n> <Down>
" 上に移動
inoremap <C-p> <Up>
cnoremap <C-p> <Up>
nnoremap <C-p> <Up>
" 左に移動
inoremap <C-b> <Left>
cnoremap <C-b> <Left>
" 右に移動
inoremap <C-f> <Right>
cnoremap <C-f> <Right>

" 行頭に移動
cnoremap <C-a> <Home>
" 行末に移動
cnoremap <C-e> <End>

" 文字削除
inoremap <C-h> <BS>
cnoremap <C-h> <BS>
inoremap <C-d> <DEL>
cnoremap <C-d> <DEL>

inoremap {<Enter> {}<Left><CR><BS><CR><UP><Tab>
inoremap [<Enter> []<Left><CR><BS><CR><UP><Tab>
inoremap (<Enter> ()<Left><CR><BS><CR><UP><Tab>

" NERDTree
noremap <C-t> :NERDTreeToggle<CR>

" NeoSnippet
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" tagsジャンプ
nnoremap <C-]> g<C-]>

if has('conceal')
  set conceallevel=2 concealcursor=i
endif

"配色設定
colorscheme wombat256
if g:colors_name ==? 'wombat256'
  hi Visual gui=none guifg=khaki guibg=olivedrab
endif

let g:indent_guides_enable_on_vim_startup = 1
let g:NERDTreeShowHidden = 1
let g:ref_phpmanual_path = $HOME . '/work/src/php/php-chunked-xhtml/'

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'

let g:use_emmet_complete_tag = 1
let g:user_emmet_mode='a'
let g:user_emmet_expandabbr_key = '<c-e>'
let g:user_emmet_settings = {
\  'lang': 'ja',
\  'html' : {
\    'filters' : 'html',
\    'indentation' : '  '
\  },
\  'css' : {
\    'filters' : 'fc',
\  },
\  'xml' : {
\    'extends' : 'html',
\  },
\  'php': {
\    'extends': 'html',
\    'filters': 'html,c'
\  }
\}

let s:sep = " %{get(g:, 'airline_right_alt_sep', '')} "
let g:Powerline_symbols = 'fancy'

let g:airline_theme='solarized'
let g:airline_left_sep = '⮀'
let g:airline_right_sep = '⮂'
let g:airline_linecolumn_prefix = '⭡'
let g:airline_branch_prefix = '⭠'
let g:airline_linecolumn_prefix = ''
let g:airline_inactive_collapse = 0

let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = '⮀'
let g:airline#extensions#tabline#left_alt_sep = '⮀'

let g:airline_section_a = airline#section#create(['mode','','branch'])
let g:airline_section_b =
      \ '%{airline#extensions#branch#get_head()}' .
      \ '%{""!=airline#extensions#branch#get_head()?("  " . g:airline_left_alt_sep . " "):""}' .
      \ '%t%( %M%)'
let g:airline_section_c = ''
let g:airline_section_x =
      \ '%{strlen(&fileformat)?&fileformat:""}'.s:sep.
      \ '%{strlen(&fenc)?&fenc:&enc}'.s:sep.
      \ '%{strlen(&filetype)?&filetype:"no ft"}'
let g:airline_section_y = '%3p%%'
let g:airline_section_z = get(g:, 'airline_linecolumn_prefix', '').'%3l:%-2v'

function! AirLineForce(...)
  let g:airline_mode_map.__ = ''
  let w:airline_render_left = 1
  let w:airline_render_right = 1
endfunction

augroup AirLineForce
  autocmd!
  autocmd VimEnter * call add(g:airline_statusline_funcrefs, function('AirLineForce'))
augroup END

function! s:RemoveDust()
  let cursor = getpos(".")
  let str = getline(line("."))

  let str = substitute(str, "\\(\\s\\|\\t\\)\\+$", "", "g")
  let str = substitute(str, "^M", "", "g")
  let str = substitute(str, "\\r", "", "g")

  call setpos(".", cursor)
  call setline(line("."), str)
  unlet cursor
  unlet str
endfunction
autocmd InsertLeave * :call s:RemoveDust()

autocmd FileType php set makeprg=php\ -l\ %
autocmd BufWritePost *.php silent make | if len(getqflist()) != 1 | copen | else | cclose | endif | redraw!
autocmd VimEnter * :FixWhitespace
autocmd BufRead *.log :AnsiEsc
