" vim: set ts=4 sw=4 sts=0:
"-----------------------------------------------------------------------------

filetype off

" Vundle関連
"
set rtp+=~/.vim/vundle.git/
call vundle#rc()
filetype plugin on

Bundle 'git://github.com/Shougo/neocomplcache.git'
Bundle 'git://github.com/thinca/vim-ref.git'
Bundle 'git://github.com/mattn/zencoding-vim.git'
Bundle 'git://github.com/shanlalit/vim-autoclose.git'
Bundle 'git://github.com/scrooloose/nerdtree.git'
Bundle 'git://github.com/tpope/vim-surround.git'
Bundle 'git://github.com/vim-scripts/molokai.git'
Bundle 'git://github.com/jnurmine/Zenburn.git'
Bundle 'git://github.com/cschlueter/vim-wombat.git'
Bundle 'https://github.com/everzet/phpfolding.vim.git'
Bundle 'https://github.com/stephpy/vim-php-cs-fixer.git'
Bundle 'https://github.com/tpope/vim-fugitive.git'
Bundle 'git://github.com/mileszs/ack.vim.git'
Bundle 'quickrun.vim'
Bundle 'ref.vim'
Bundle 'osyo-manga/vim-over'

"-----------------------------------------------------------------------------
" 文字コード関連
"
" 文字コード
set fileencoding=utf-8

" 改行コードの自動認識
set fileformats=unix,dos,mac

" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
	set ambiwidth=double
endif

"-----------------------------------------------------------------------------
" コマンドライン
"-----------------------------------------------------------------------------
" コマンドラインは1行
set cmdheight=1
" コマンドを表示"
set showcmd

"-----------------------------------------------------------------------------
" 編集関連
"
"オートインデントする
set autoindent

"-----------------------------------------------------------------------------
" 検索関連
"
"検索文字列が小文字の場合は大文字小文字を区別なく検索する
set ignorecase
"検索文字列に大文字が含まれている場合は区別して検索する
set smartcase
"検索時に最後まで行ったら最初に戻る
set wrapscan
"検索文字列入力時に順次対象文字列にヒットさせない
set noincsearch

"-----------------------------------------------------------------------------
" 装飾関連
"
"シンタックスハイライトを有効にする
if has("syntax")
	syntax on
endif
"タブの左側にカーソル表示
set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<
set list
"タブ幅を設定する
set tabstop=4
set shiftwidth=4
"入力中のコマンドをステータスに表示する
set showcmd
"括弧入力時の対応する括弧を表示
set showmatch
"検索結果文字列のハイライトを有効にする
set hlsearch
"ステータスラインを常に表示
set laststatus=2
"ステータスラインに文字コードと改行文字を表示する
set statusline=%<%f\ %m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'.fugitive#statusline()}%=%l,%c%V[%L]%8P
"行番号の表示
set number

"-----------------------------------------------------------------------------
" キーバインド定義
"-----------------------------------------------------------------------------
" 下に移動
inoremap <C-n> <Down>
cnoremap <C-n> <Down>
" 上に移動
inoremap <C-p> <Up>
cnoremap <C-p> <Up>
" 左に移動
inoremap <C-b> <Left>
cnoremap <C-b> <Left>
" 右に移動
inoremap <C-f> <Right>
cnoremap <C-f> <Right>

" 行頭に移動
cnoremap <C-a> <Home>
" 行末に移動
cnoremap <C-e> <End>

" 文字削除
inoremap <C-h> <BS>
cnoremap <C-h> <BS>
inoremap <C-d> <DEL>
cnoremap <C-d> <DEL>

" NERDTree
noremap <C-t> :NERDTreeToggle<CR>

"配色設定
colorscheme wombat256
if g:colors_name ==? 'wombat256'
  hi Visual gui=none guifg=khaki guibg=olivedrab
endif

let g:neocomplcache_enable_at_startup = 1
let g:ref_phpmanual_path = $HOME . '/work/src/php/php-chunked-xhtml/'
let g:NERDTreeShowHidden = 1
let g:user_zen_expandabbr_key = '<C-e>'
let g:user_zen_settings = {
\   'html': {
\       'empty_elements': 'input,br,hr'
\   }
\}

function! PhpSyntax()
  let result = system( &ft . ' -l ' . bufname(""))
  echo result
endfunction
nmap ps :call PhpSyntax()<CR>
nmap pcd :call PhpCsFixerFixDirectory()<CR>
nmap pcf :call PhpCsFixerFixFile()<CR>

function! s:RemoveDust()
  let cursor = getpos(".")
  let str = getline(line("."))

  let str = substitute(str, "\\(\\s\\|\\t\\)\\+$", "", "g")
  let str = substitute(str, "^M", "", "g")
  let str = substitute(str, "\\r", "", "g")

  call setpos(".", cursor)
  call setline(line("."), str)
  unlet cursor
  unlet str
endfunction
autocmd InsertLeave * :call s:RemoveDust()
